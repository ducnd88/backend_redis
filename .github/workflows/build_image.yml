name: 📦️ A-TEST
on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: [ self-hosted ]
    outputs:
      access-token-encrypted: ${{ steps.get-gcp-access-token.outputs.access-token-encrypted }}
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Get Access Token
        id: get-gcp-access-token
        run: |
          TOKEN=$(/home/nux/google-cloud-sdk/bin/gcloud auth print-access-token)
          echo "TOKEN IS $TOKEN"
          echo "::add-mask::$TOKEN"
          TOKEN_ENCRYPTED=$(echo -n "$TOKEN" | base64 -w0)
          echo "TOKEN_ENCRYPTED is $TOKEN_ENCRYPTED"
          echo "access-token=$TOKEN" >> "$GITHUB_OUTPUT"
          echo "access-token-encrypted=$TOKEN_ENCRYPTED" >> "$GITHUB_OUTPUT"

      - name: Check output
        run: |
          echo ${{ steps.get-gcp-access-token.outputs.access-token }} | docker login \
            -u oauth2accesstoken \
            --password-stdin https://asia-southeast1-docker.pkg.dev

#      - name: Build and push
#        run: |
#          cd ${{ github.workspace }}
#          docker build -t ducnd88/backend_redis:latest .
#          docker push ducnd88/backend_redis:latest

  deploy:
    runs-on: [ self-hosted ]
    needs: [build]
    steps:
      - name: use secret
        id: secret
        run: |
          TOKEN_ENCRYPTED="${{ needs.build.outputs.access-token-encrypted }}"
          echo "TOKEN_ENCRYPTED is $TOKEN_ENCRYPTED"
          TOKEN=$(echo -n "$TOKEN_ENCRYPTED" | base64 -d )
          echo "TOKEN IS $TOKEN"
          echo "::add-mask::$TOKEN"
          echo "access-token=$TOKEN" >> "$GITHUB_OUTPUT"
      - name: Check output
        run: |
          echo ${{ steps.secret.outputs.access-token }} | docker login \
            -u oauth2accesstoken \
            --password-stdin https://asia-southeast1-docker.pkg.dev
#      - name: Install SSH Keys
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H ${{ secrets.SSH_IP_HOST }} >> ~/.ssh/known_hosts
#          chmod 600 ~/.ssh/known_hosts
#      - name: ssh to server and pull image
#        run: |
#          ssh -o StrictHostKeyChecking=no root@${{ secrets.SSH_IP_HOST }} << EOF
#            docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
#            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/be_docker:latest
#            docker stop backend
#            docker rm backend
#            docker image prune -f
#            docker run -dp 8080:8080 --name backend ${{ secrets.DOCKER_HUB_USERNAME }}/be_docker:latest
#            docker logout
#          EOF
#      - name: cleanup
#        run: rm -rf ~/.ssh